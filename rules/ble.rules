import org.eclipse.smarthome.model.script.ScriptServiceUtil

val mitherm_topic = "dacha/MiThermometr/"
val TAG = "BLE"	
val mqttActions = getActions("mqtt","mqtt:broker:mosquitto")

rule "Mi therm data"
when
    Member of BLE_Mi_Thermometr changed
then
    val item = triggeringItem
    val name = item.name
    //logInfo(TAG, "item changed = {}", item)

    val String data = item.state.toString
    var mac = String::format("%s%s%s%s%s%s" 
        , transform("JSONPATH", "$.[0]", data)
        , transform("JSONPATH", "$.[1]", data)
        , transform("JSONPATH", "$.[2]", data)
        , transform("JSONPATH", "$.[3]", data)
        , transform("JSONPATH", "$.[4]", data)
        , transform("JSONPATH", "$.[5]", data)
        ).toUpperCase

    val item_mac = name.split("_", 4).get(2)

    if ( item_mac.equals( mac ) ) {
        val item_temp = ScriptServiceUtil.getItemRegistry.getItem( name.replace("_Data", "_Temperature") )
        val item_hum = ScriptServiceUtil.getItemRegistry.getItem( name.replace("_Data", "_Humidity") )
        val item_bat = ScriptServiceUtil.getItemRegistry.getItem( name.replace("_Data", "_Batttery") )

        var temp = (Integer::parseInt(transform("JSONPATH", "$.[6]", data), 16) * 256 + Integer::parseInt(transform("JSONPATH", "$.[7]", data), 16)) / 10.0f
        item_temp.sendCommand(temp)
        
        // hum
        var hum = Integer::parseInt(transform("JSONPATH", "$.[8]", data), 16)
        item_hum.sendCommand(hum)
        
        // bat
        var bat = Integer::parseInt(transform("JSONPATH", "$.[9]", data), 16)
        item_bat.sendCommand(bat)
    }
end

rule "Member of BLE_LYWSD03MMC_A4C1386DD473"
when    
    Member of BLE_LYWSD03MMC_A4C1386DD473 received update //changed
then
    val item = triggeringItem
    val name = item.name
    //logInfo(TAG, "item {} changed to {}", item.name, item.state.toString)

    val item_mac = name.split("_", 4).get(2)     
    val item_type = name.split("_", 4).get(3)

    if ( item_type.equals("Data") ) {
        return;
    }

    //BLE_LYWSD03MMC_A4C1386DD473.postUpdate( String::format("%s | %s", ScriptServiceUtil.getItemRegistry.getItem( name.replace("_ProxyData", "_Temperature") ).state.toString
    //                                                                , ScriptServiceUtil.getItemRegistry.getItem( name.replace("_ProxyData", "_Humidity") ).state.toString)
    //)
    // val text = String::format("%s°C/ %s%%", BLE_LYWSD03MMC_A4C1386DD473_Temperature.state.toString, 
    //                                      BLE_LYWSD03MMC_A4C1386DD473_Humidity.state.toString)

    //BLE_LYWSD03MMC_A4C1386DD473.postUpdate( BLE_LYWSD03MMC_A4C1386DD473_Temperature.state)

    val topic = mitherm_topic + item_mac + "/" + item_type

    mqttActions.publishMQTT( topic, item.state.toString, false);
end

rule "Mi Thermometr poll"
when
    Time cron "0 0/1 * * * ?"  // каждые 15 сек
then
    val mac = "A4:C1:38:6D:D4:73"
    val base_cmd = "sh@@/etc/openhab2/scripts/mi_thermometr.sh@@" + mac 

    // get temp
    var cmd = base_cmd + "@@0x0012"
    //logInfo(TAG, "BLE command:" + cmd)
    var String results = executeCommandLine(cmd, 15000)
    if ( !results.equals("")) {
        var float temp = Integer.parseInt( results, 10 ) / 10.0f
        BLE_LYWSD03MMC_A4C1386DD473_Temperature.sendCommand( temp )
        //BLE_LYWSD03MMC_A4C1386DD473_Data.sendCommand( temp )

        logInfo(TAG, "BLE polling temperature: {} ", temp)
    }
    else
    logInfo(TAG, "BLE polling: {} ", "empty")

    // get hum
    cmd = base_cmd + "@@0x0015"
    results = executeCommandLine(cmd, 15000)
    if ( !results.equals("")) {
        var hum = Integer.parseInt( results, 10 ) / 100
        BLE_LYWSD03MMC_A4C1386DD473_Humidity.sendCommand( hum )
        logInfo(TAG, "BLE polling humidity: {} ", hum)
    }
    else
        logInfo(TAG, "BLE polling: {} ", "empty")    

    // get hum
    cmd = base_cmd + "@@0x000e"
    results = executeCommandLine(cmd, 15000)
    if ( !results.equals("")) {
        var bat = Integer.parseInt( results, 10 )
        BLE_LYWSD03MMC_A4C1386DD473_Batttery.sendCommand( bat )
        logInfo(TAG, "BLE polling battery: {} ", bat)
    }
    else
        logInfo(TAG, "BLE polling: {} ", "empty")            
end    